//Done by Henok Seifu
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
using namespace std;

int main(){
    set<int> A;
    multiset<int> B;

    int to_read;
    //read and append until negative number
    while(1){
        cin >> to_read;
        if(to_read < 0){
            break;
        }
        A.insert(to_read);
        B.insert(to_read);
    }

    //print both 
    set<int>::iterator iter;
    for(iter = A.begin(); iter != A.end(); iter++){
        cout << *iter << " ";
    }
    cout << "\n";

    multiset<int>::iterator iter1;
    for(iter1 = B.begin(); iter1 != B.end(); iter1++){
        cout << *iter1 << " ";
    }
    cout << "\n";

    //erase all occurences of 5 in both sets
    A.erase(5);
    B.erase(5);

    //print both sets
    set<int>::iterator iter2;
    for(iter2 = A.begin(); iter2 != A.end(); iter2++){
        cout << *iter2 << " ";
    }
    cout << "\n";

    multiset<int>::iterator iter3;
    for(iter3 = B.begin(); iter3 != B.end(); iter3++){
        cout << *iter3 << " ";
    }
    cout << "\n";

    //insert 14 and 198 into the set A 
    A.insert(14);
    A.insert(198);

    //find the union
    multiset<int> result;//set union container: multiset
    multiset<int>::iterator uni_it;//multiset iterator to print
    //call the function with set begins and ends and an inserting iterator generated by function: inserter
    set_union(A.begin(), A.end(), B.begin(), B.end(), inserter(result, result.begin()));
    
    //print union
    for(uni_it = result.begin(); uni_it != result.end(); uni_it++){
        cout << *uni_it << " ";
    }
    cout << "\n";

    //find the intersection
    set<int> intersect;//set union container: set
    set<int>::iterator inter_it;//set iterator to print
    //call the function with set begins and ends and an inserting iterator generated by function: inserter
    set_intersection(A.begin(), A.end(), B.begin(), B.end(), inserter(intersect, intersect.begin()));

    //print intersection
    for(inter_it = intersect.begin(); inter_it != intersect.end(); inter_it++){
        cout << *inter_it << " ";
    }
    cout  << "\n";

    //find the difference
    set<int> difference;
    set<int>::iterator diffit;//set iterator for printing
    //call the function with set begins and ends and an inserting iterator generated by function: inserter
    set_difference(A.begin(), A.end(), B.begin(), B.end(), inserter(difference, difference.begin()));

    //print difference
    for(diffit = difference.begin(); diffit != difference.end(); diffit++){
        cout << *diffit << " ";
    }
    cout  << "\n";

    //find the symmetric difference
    set<int> symmetricdiff;//set iterator for printing
    set<int>::iterator symmetricdiff_it;
    //call the function with set begins and ends and an inserting iterator generated by function: inserter
    set_symmetric_difference(A.begin(), A.end(), B.begin(), B.end(), inserter(symmetricdiff, symmetricdiff.begin()));

    //print symmetric difference
    for(symmetricdiff_it = symmetricdiff.begin(); symmetricdiff_it != symmetricdiff.end(); symmetricdiff_it++){
        cout << *symmetricdiff_it << " ";
    }
    cout  << "\n";


    return 0;
}